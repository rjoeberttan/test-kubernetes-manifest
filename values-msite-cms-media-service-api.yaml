# Default values for msite-base-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# =================================================================
# Helm Generated Keys in values
# =================================================================
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# ================================================================
# Deployment Values
# ================================================================
# applicationName is being used as general naming for all Kubernetes Objects to be created
applicationName: msite-cms-media-service-api
namespace: msite-devtron-stg

# labels is being used for all labels in deployment, container, and being used as a selector in the service
labels: {
  "app.s3dv.io.name": "msite-cms-media-service-api"
}

# Replica count in deployment 
replicaCount: 1

image:
  repository: testacrmsitestgea.azurecr.io/devtron/msite-cms-media-service-api
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: [{"name": "acr-secret"}]

# While these will be the ports to be exposed in the deployment/container
containerPorts: [{
    "containerPort": 8080,
    "name": "http",
    "protocol": TCP
  },{
    "containerPort": 443,
    "name": "https",
    "protocol": TCP 
  }]

# Environment variable in the deployment/container
envVars: [{"name": "ASPNETCORE_ENVIRONMENT", "value": "Development"}, {"name": "ASPNETCORE_URLS", "value": "http://*:8080"}, {"name": "NEW_RELIC_LICENSE_KEY", "value": "429e116a74708dffa2e85b98b23ad286FFFFNRAL"}]

applyStartupProbe: true
startupProbe: {
  "httpGet": {
    "path": "/api/health",
    "port": 8080
  },
  "failureThreshold": 30,
  "periodSeconds": 10
}


applyReadinessProbe: true
readinessProbe: {
  "failureThreshold": 5, 
  "httpGet": {
    "path": "/api/health",
    "port": "8080"
  },
  "initialDelaySeconds": 120,
  "periodSeconds": 10,
  "successThreshold": 1,
  "timeoutSeconds": 60
}

applyLivelinessProbe: true
livelinessProbe: {
  "failureThreshold": 5, 
  "httpGet": {
    "path": "/api/health",
    "port": "8080"
  },
  "initialDelaySeconds": 120,
  "periodSeconds": 10,
  "successThreshold": 1,
  "timeoutSeconds": 60,
  "terminationGracePeriodSeconds": 60
}

# Resources used for deployment/container
resources: {
  "requests": {"memory": "300Mi", "cpu": "100m"} , "limits": {"memory": "300Mi", "cpu": "100m"} 
}

# Tolerations used for deployment/container
tolerations: [
  {
    "key": "worker", "operator": "Equal", "value": "md-cms", "effect": "NoSchedule"
  }
]

affinity: {
  "nodeAffinity": 
    {"requiredDuringSchedulingIgnoredDuringExecution":
      {"nodeSelectorTerms": 
        [
          {
            "matchExpressions": 
            [
              {"key": "nodepool", "operator": "In", "values": [ "md-cms" ]}
            ]
          }        
        ]
      }
    }
}

applyVolumes: false
volumeMounts: [{"name": "config-appsettings-secret", "mountPath": "/app/appsettings.json", "subPath": "appsettings.json"}, {"name": "config-appsettings-secret", "mountPath": "/app/appsettings.Development.json", "subPath": "appsettings.json"}]
volumes: [{ "name": "config-appsettings-secret", "secret": {"secretName": "msite-cms-media-service-api-secret" }}]

applyDeploymentStrategy: 
  enabled: true
strategy: {"rollingUpdate": {"maxSurge": 1, "maxUnavailable": 1}, "type": "RollingUpdate"}



# ================================================================
# Service Values
# ================================================================
# This is the entries which will be populated in the service object
servicePorts: [{
    "port": 8080,
    "name": "http",
    "protocol": TCP,
    "targetPort": 8080,
  },{
    "port": 443,
    "name": "https",
    "protocol": TCP,
    "targetPort": 443,
  }]



# ================================================================
# Ingress Values
# ================================================================
ingress:
  enabled: true
  className: ""
  annotations: {
    "kubernetes.io/ingress.class": "nginx",
    "nginx.ingress.kubernetes.io/use-regex": "true",
    "nginx.ingress.kubernetes.io/enable-cors": 'true',
    "nginx.ingress.kubernetes.io/cors-allow-headers": "AccessToken, Content-Type, Authorization",
    "nginx.ingress.kubernetes.io/proxy-cookie-path": "/ \"/; Secure;\"",
    "nginx.ingress.kubernetes.io/proxy-body-size": "300m",
  }
  hosts:
    - host: api-mediaservice.msitestg.com-test
      paths:
        - path: /
          pathType: Prefix
          backend:
              service:
                name: msite-cms-media-service-api
                port:
                  number: 8080
    - host: api-mediaservice.msitestg.internal-test
      paths:
        - path: /asd
          pathType: Prefix
          backend:
              service:
                name: msite-cms-media-service-api
                port:
                  number: 8080
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
service:
  port: 8080


# ================================================================
# HPA Values
# ================================================================
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 4
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 60

scaleDown: {
    "stabilizationWindowSeconds": 60,
    "policies": [{
      "type": "Pods", "value": 1, "periodSeconds": 60
    }]
  }

scaleUp: {
    "stabilizationWindowSeconds": 60,
    "policies": [{
      "type": "Pods", "value": 1, "periodSeconds": 60
    }]
  }

nodeSelector: {}


# ================================================================
# Configmap Values
# ================================================================
configFileName: appsettings.json
config: |
  {
      "ConnectionStrings": {
        "MediaDb": "Data Source=172.18.122.8\\MSITESTGAG_01,1433; Initial Catalog=msite-media; User ID=msite.user;Password=GPu3WxAytqCJH_qr;Max Pool Size=2000;Min Pool size=5;Pooling=true;Connection Timeout=6000;"
      },
      "AzureStorage": {
        "ConnectionString": "DefaultEndpointsProtocol=https;AccountName=samsitestgea;AccountKey=n6VWg+2tnu6IFdhqQw9mxwTlglN45SiXmVM7FaAHGcrTlEQsYjbZELRbRqpNk3do2/bCo2oXvuqu+AStG/ym8g==;EndpointSuffix=core.windows.net",
        "Container": "msitestg",
        "EndPointUrl": "https://samsitestgea.blob.core.windows.net/msitestg"
      },
      "FrontEndUrl": "https://msphere.msitestg.com",
      "Logging": {
        "LogLevel": {
          "Default": "Debug",
          "Microsoft": "Debug",
          "Microsoft.Hosting.Lifetime": "Debug"
        }
      },
      "AllowedHosts": "*",
      "Redis": {
        "Password": "z6aCFlZqv83xp8oaE614iUuS88uFNyKXwAzCaAZauhk=",
        "AllowAdmin": false,
        "Ssl": true,
        "ConnectTimeout": 10000,
        "ConnectRetry": 2,
        "Hosts": [
          {
            "Host": "REDIS-MSITE-STG-EA.redis.cache.windows.net",
            "Port": "6380"
          }
        ],
        "Database": 0
      },
      "AutoSaveToRedis": true,
      "NLog": {
        "autoReload": true,
        "throwConfigExceptions": false,
        "internalLogLevel": "Off",
        "internalLogFile": "c:\\temp\\internal-nlog.txt",
        "extensions": {
          "NLog.Web.AspNetCore": {
            "assembly": "NLog.Web.AspNetCore"
          },
          "NLog.Web.AspNetCore.Targets.Gelf": {
            "assembly": "NLog.Web.AspNetCore.Targets.Gelf"
          }
        },
        "variables": {
          "var_logdir": "c:/temp"
        },
        "default-wrapper": {
          "type": "AsyncWrapper",
          "overflowAction": "Block"
        },
        "targets": {
          "gelfudp": {
            "type": "Gelf",
            "facility": "msite-udp-12201-staging",
            "endpoint": "udp://172.18.102.5:12201",
            "layout": "${message}",
            "SendLastFormatParameter": true,
            "parameter": {
              "Name": "thread",
              "Layout": "${threadid}"
            }
          },
          "swfile": {
            "type": "File",
            "filename": "C:\\Logs\\${shortdate}\\${level}.txt",
            "layout": "${longdate}|${level:upperCase=true}|${logger}|${aspnet-Request-Method}|url: ${aspnet-Request-Url}${aspnet-Request-QueryString}|${message}|${event-properties:item=Parameter}",
            "concurrentwrites": "true"
          }
        },
        "rules": [
          {
            "logger": "*",
            "minLevel": "Debug",
            "writeTo": "GelfUdp"
          },
          {
            "logger": "*",
            "minLevel": "Debug",
            "writeTo": "swFile"
          }
        ]
      }
    }